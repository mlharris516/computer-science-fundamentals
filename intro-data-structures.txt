1. A line of people at an amusement park ride.

The line is composed of members, represented as strings.
There is a front to the line, as well as a back.
When someone enters the line, place them at the end.
People may leave the line whenever they see fit, and those behind them take their place.
Given the above real-world information, use an array data structure to code the following solution.

a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]

var rideLine = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];

b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.

function newRider(rideLine) {
    return (rideLine.push("Mary"));
}
console.log(rideLine);
console.log(newRider[index]);


c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).

const index = rideLine.findIndex(rider => rider === "Josh");
console.log(index);


d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?

var findEmily = rideLine.indexOf("Emily");
console.log(findEmily);
//prints -1 if not found


e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?

rideLine.splice(1, 0, "Melissa");
console.log(rideLine);

f) If Patrick wants to leave the line, how would you delete him from the array?

var rideLine = ["Vivian", "Melissa", "Ava", "Josh", "Patrick", "Mike"];
rideLine.splice(3, 1);
console.log(rideLine);

2. Provide another real-world example that you can model using a data structure.
 
    A doctor's office waiting room.

3. How would your data structure allow developers to access and manipulate the data?

    You could tell who checked in, and remove them as they go into see the doctor. If someone made an appointment, they would be inserted before a walk-in customer in the queue. 