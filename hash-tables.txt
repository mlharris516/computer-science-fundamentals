Hash Tables

Exercises

1. What is a hash table?

A type of data structure that can handle large amounts of information by storing it as value/key pairs.

2. What is hashing?

The process of converting a key into an integer-based has code.

3. How does a hash table store data?

As a collection of values paired with key identifiers in a map.

4. How are hash tables and objects different?

Hash tables can handle much more information than objects can by themselves. Hash tables also store the key/value pairs with unique identifiers, hash codes.

5. Determine whether you would use a hash table or an object to store each of the following pieces of data:

-A list of pets and their unique names.
hash table

-The name, age, and the birthday of your best friend.
object

-The name and location of every company in a given city.
hash table

-All of the books checked out from a library by a particular individual.
hash table

-The primary and secondary phone numbers for a contact.
object


Programming Questions

1. Create a hash table that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers.

var hash = (string, max) => {
    var hash = 0;
    for (var i = 0; i < string.length; i++) {
      hash += string.charCodeAt(i);
    }
    return hash % max;
  };
  
  let HashTable = function() {
  
    let storage = [];
    const storageLimit = 100;
  
    this.add = function(key,value) {
      var index = hash(key, storageLimit);
      if (storage[index] === undefined) {
        storage[index] = [
          [key,value]
        ];
      } else {
        var inserted = false;
        for (var i = 0; i < storage[index].length; i++) {
          if (storage[index][i][0] === key) {
            storage[index][i][1] = value;
            inserted = true;
          }
        }
        if (inserted === false) {
          storage[index].push([key,value]);
        }
      }
    };
  
    this.lookup = function(key) {
      var index = hash(key, storageLimit);
      if (storage[index] === undefined) {
        return undefined;
      } else {
        for (var i = 0; i < storage[index].length; i++) {
          if (storage[index][i][0] === key) {
            return storage[index][i][1];
          }
        }
      }
    };
  
  };
  
  var phoneBook = new HashTable();
  phoneBook.add(888-904-1095,{name:'Meredith', address:'123 4th. St.'})
  phoneBook.add(904-293-5988,{name:'Frankie',address:'999 Mountain Ave.'});
  phoneBook.add(930-594-9820,{name:'Patrick',address:'8394 Fox Dr.'});
  
  console.log(phoneBook.lookup(888-904-1095));
  console.log(phoneBook.lookup(904-293-5988));
  console.log(phoneBook.lookup(930-594-9820));



2. Create a hash table that allows a store owner to track their store's inventory and quantity.

var hash = (string, max) => {
    var hash = 0;
    for (var i = 0; i < string.length; i++) {
      hash += string.charCodeAt(i);
    }
    return hash % max;
  };
  
  let HashTable = function() {
  
    let storage = [];
    const storageLimit = 100;
  
    this.add = function(key,value) {
      var index = hash(key, storageLimit);
      if (storage[index] === undefined) {
        storage[index] = [
          [key,value]
        ];
      } else {
        var inserted = false;
        for (var i = 0; i < storage[index].length; i++) {
          if (storage[index][i][0] === key) {
            storage[index][i][1] = value;
            inserted = true;
          }
        }
        if (inserted === false) {
          storage[index].push([key,value]);
        }
      }
    };
  
    this.lookup = function(key) {
      var index = hash(key, storageLimit);
      if (storage[index] === undefined) {
        return undefined;
      } else {
        for (var i = 0; i < storage[index].length; i++) {
          if (storage[index][i][0] === key) {
            return storage[index][i][1];
          }
        }
      }
    };
  
  };
  
  var inventory = new HashTable();
  inventory.add('Khaki Pants', 7);
  inventory.add('Blue Sweatshirts', 18);
  inventory.add('Leather Belts', 9);
  
  console.log(inventory.lookup('Khaki Pants'));
  console.log(inventory.lookup('Blue Sweatshirts'));
  console.log(inventory.lookup('Leather Belts'));


3. Create a hash table that allows digital copies of newspapers to be entered and searched by publisher and publication date.

function hash(key, size){
    var hash = 0;
    for(var i = 0; i < key.length; i++){
      hash += key.charCodeAt(i);
    }
  
    return hash % size;
  }
  
  function hashTableByPublisher(){
    var container = [];
    var containerCap = 577;
  
    this.set = function(publisher, date, article){
      var index = hash(publisher, containerCap);
  
      if(container[index] === undefined){
        container[index] = [ [publisher, date, article] ];
      }
    };
  
    this.get = function(publisher){
      var index = hash(publisher, containerCap);
  
      if(container[index] === undefined) {
          return "The publisher list is empty";
      } else {
          for(var i = 0; i < container[index].length; i++) {
            if(container[index][i][0] === publisher) {
                return "Publisher: " + container[index][i][0] + ", date published: " + container[index][i][1] + ", article: " + container[index][i][2];
            } else {
              return "publisher not found";
            }
          }
      } 
    };
  }
  
  function hashTableByDate(){
    var container = [];
    var containerCap = 577;
  
    this.set = function(publisher, date, article){
      var index = hash(date, containerCap);
  
      if(container[index] === undefined){
        container[index] = [ [publisher, date, article] ];
      }
    };
  
    this.get = function(date){
      var index = hash(date, containerCap);
  
      if(container[index] === undefined) {
          return "The article list is empty";
      } else {
          for(var i = 0; i < container[index].length; i++) {
            if(container[index][i][1] === date) {
                return "Publisher: " + container[index][i][0] + ", date published: " + container[index][i][1] + ", article: " + container[index][i][2];
            } else {
              return "date not found";
            }
          }
      } 
    };
  }
  
  var article = new hashTableByPublisher();
  var articleDate = new hashTableByDate();
  
  article.set("Blah Times", "1989", "blahblahblah");
  article.set("Blues Banter", "1990", "blues blues blues");
  article.set('SkyMall Review', '2001', "great pizza shaped tie");
  
  articleDate.set("Blah Times", "1989", "blahblahblah");
  articleDate.set("Blues Banter", "1990", "blues blues blues");
  articleDate.set('SkyMall Review', '2001', "great pizza shaped tie");
  
  console.log(article.get("Blah Times"));
  console.log(articleDate.get("2001"));
  console.log(article.get("Text Article"));
  console.log(articleDate.get("2019"))
  
